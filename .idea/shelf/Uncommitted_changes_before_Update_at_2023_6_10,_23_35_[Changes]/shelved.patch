Index: source/_posts/git.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>---\ntitle: git and git commit order\ndate: 2023-03-08 22:01:44\ntags: git命令\ncategories:\n- 日常记录\nexcerpt: git常用的基础命令已经git commit规范\ncomments: false\n---\n#### git order\n```shell\n#https方式clone\ngit clone https://github.com/YourGitHubName/RepositoriesName.git\n\n#SSH方式clone，只有仓库拥有者以及管理员才能使用，并且需要在本地生成ssh key\ngit clone git@github.com:YourGitHubName/RepositoriesName.git\n\n#指定分支克隆项目,branchName为你要克隆的分支名称\ngit clone git@github.com:YourGitHubName/RepositoriesName.git -b branchName\n\n#查看仓库内文件的状态\ngit status\n\n#添加文件到缓存区\ngit add -A\n\n#删除文件\ngit rm filepath\n\n#提交文件\ngit commit -m 'commit comments'\n\n#推送文件\ngit push -u origin master\n\n#查看所有分支\ngit branch -a\n\n#新建分支\ngit branch newBranchName\n\n#切换分支\ngit checkout branchName\n\n#查看全部远程链接仓库地址\ngit remote -v\n\n#添加远程仓库链接\n#https,YourGitHubName=GitHub账户名，RepositoriesName=仓库名\ngit remote add origin https://github.com/YourGitHubName/RepositoriesName.git\n#SSH方式\ngit remote add origin git@github.com:YourGitHubName/RepositoriesName.git\n\n#查看全部变量(system,global,local)\ngit config --list\n\n#查看系统变量\ngit config --system --list\n\n#查看全局变量\ngit config --global --list\n\n#查看本地变量\ngit config --local --list\n\n#保存本地代码修改，暂不提交改动部分（适用于新增功能未做完，又需update修改旧功能）\ngit stash\n\n#想要加上注释的写法：\ngit stash save 'stash comments'\n\n#回滚单个文件\ngit checkout fileName\n```\n\n#### git commit rules\n> *type类型*\n> + fix/to：修复BUG，fix产生diff并一次修复，to产生diff，但是不自动修复，适用多次提交，最后一次是fix\n> + feat：增加新功能\n> + refactor：重构（既不是新增功能，也不是修复BUG的代码改动）\n> + style：格式（不影响代码运行的变动）\n> + perf：优化相关，比如性能，体验\n> + docs：文档\n> + test：增加测试\n> + chore：构建过程或辅助工具的改变\n> + revert：回退上一个版本\n> + merge：合并代码\n> + sync：同步主线或分支的BUG\n> \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/source/_posts/git.md b/source/_posts/git.md
--- a/source/_posts/git.md	(revision fb79d415e46cf9b136a96646eac0823a5d380fff)
+++ b/source/_posts/git.md	(date 1678377694633)
@@ -1,10 +1,10 @@
 ---
-title: git and git commit order
+title: Git and git commit order
 date: 2023-03-08 22:01:44
 tags: git命令
 categories:
 - 日常记录
-excerpt: git常用的基础命令已经git commit规范
+excerpt: git常用的基础命令以及git commit规范
 comments: false
 ---
 #### git order
Index: source/_posts/oracleFuntion.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>---\ntitle: oracleFunction\ndate: 2023-03-09 20:53:02\ncategories:\n- 日常记录\ntags: oracle函数日常记录\ncomment: false\nexcerpt: 在日常后端开发工作中，写SQL语句是家常便饭，SQL中有时可能需要加入一些业务的处理，因此使用到函数的频率还是挺高的，以下是我工作中使用频率较高的一些Oracle函数，自己整理出来记一下，也方便供大家参考使用。\n---\n\n#### 前言：\n> 在日常后端开发工作中，写SQL语句是家常便饭，SQL中有时可能需要加入一些业务的处理，因此使用到函数的频率还是挺高的，以下是我工作中使用频率较高的一些Oracle函数，自己整理出来记一下，也方便供大家参考使用。\n>\n#### 1、NVL()\n> NVL()函数用于判断一个字段的值是否为NULL，如NVL(A,B),若是A为NULL，则取B的值，若是不为NULL，则仍取A的值。\n\n#### 2、NVL2()\n> NVL2()函数的作用同样是判断字段值是否为NULL，但是Oracle在NVL()函数的基础上新增了一个参数，如NVL(A,B,C),若是A为NULL,则取C的值，不为NULL则是取B的值，不再取A的值，A作为一个判断条件。\n\n#### 3、REPLACE()\n> REPLACE()函数的作用是替换字段中的字符串，如：字段A = \"HelloWorld\"，REPLACE(A,\"World\",\"ZhangSan\")的执行结果为\"\"HelloZhangSan。\n\n#### 4、LENGTH()\n> LENGTH()函数作用是获取字段的长度，如：字段A =  \"ABC\"，LENGTH(A)的执行结果为\"3\"。\n\n#### 5、SUBSTR()\n> SUBSTR()函数的作用是截取字符串，如：字段A=\"Hello\"，SUBSTR(A,0,2)的执行结果为\"He\",其中A为被截取的字符串，“0”代表开始截取的位置下标（注意Oracle中的SUBSTR()函数，下标0和1是一样的，都是第一个字符开始截取，若是负数，则是从字符串尾部往前数），“2”代表截取的字符个数。\n\n#### 6、DECODE()\n> DECODE()函数的作用是判断字段值是否为某个值，若为某个值则进行替换，可以对一对或多对值进行比较。\n格式为：DECODE(A,S1,R1,S2,R2...,Defult)，其中A为目标字段，S1为比较字段，R1为结果字段，Defult为默认结果，把字段A与所有比较字段进行值的比较，若是相等，则输出结果字段，如果全部都不相等，则输出默认字段，若是没有指定默认字段，则默认输出NULL。\n如：字段A = \"ZhangSan\"，DECODE(A,'ZhangSan','张三','LiSi','李四',NULL)的执行结果为：\"张三\"。\n\n#### 7、TO_DATE()\n> TO_DATE()函数为时间转换函数，格式为：TO_DATE('2022-06-30 00:00:00', 'YYYY-MM-DD HH24:MI:SS')，其中第一个参数为需要转换为时间的字符串，第二个参数为转换成的时间格式，可以自定义，需要注意的是在Oracle中，小时对应“HH24”,分对应“MI”。\n\n#### 8、TO_CHAR()\n> TO_CHAR()函数为转换字符串，可以将时间转换为字符串，如：TO_CHAR(SYSDATE,'YYYYMMDD')，执行结果为“20220630”形式，可以按需要的格式将时间转换为字符串形式。\n\n#### 9、ROUND()\n> ROUND()函数为计算精度函数，可以选择保留小数位数，如：字段A = '32.123456'，ROUND(A,3)的执行结果为“32.123”。\n\n#### 10、CONCAT()\n> CONCAT()函数的作用是字符串拼接，如：字段A = “Hellow”，B = “World”，CONCAT(A,B)的结果为“HelloWorld”。\n\n\n#### 11、ROW_NUMBER() OVER()\n> ROW_NUMBER() OVER()函数的作用是按指定字段分组并排序，多用于取一组值中的最大或最小值。\n\n#### 12、FULL OUTER JOIN\n> FULL OUTER JOIN为两个表的并集，INNER JOIN则是交集。\n\n\n#### 13、INSTR()\n> INSTR(S1,S2,[N1,N2])表示获取指定一个子字符串S2在主字符串S1中的位置，N1表示从主串的那个位置开始查找，N2表示第几个子串出现的位置（N1,N2为可选参数，不填默认为1，从左到右查找，第一个出现的位置，N1为负数则是从右到左查找）\n\n\n#### 14、CAST()\n> 字符类型转换函数，可以将string转成integer类型\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/source/_posts/oracleFuntion.md b/source/_posts/oracleFuntion.md
--- a/source/_posts/oracleFuntion.md	(revision fb79d415e46cf9b136a96646eac0823a5d380fff)
+++ b/source/_posts/oracleFuntion.md	(date 1686410599212)
@@ -8,52 +8,120 @@
 excerpt: 在日常后端开发工作中，写SQL语句是家常便饭，SQL中有时可能需要加入一些业务的处理，因此使用到函数的频率还是挺高的，以下是我工作中使用频率较高的一些Oracle函数，自己整理出来记一下，也方便供大家参考使用。
 ---
 
-#### 前言：
+## 前言：
 > 在日常后端开发工作中，写SQL语句是家常便饭，SQL中有时可能需要加入一些业务的处理，因此使用到函数的频率还是挺高的，以下是我工作中使用频率较高的一些Oracle函数，自己整理出来记一下，也方便供大家参考使用。
 >
+### 一、函数
 #### 1、NVL()
 > NVL()函数用于判断一个字段的值是否为NULL，如NVL(A,B),若是A为NULL，则取B的值，若是不为NULL，则仍取A的值。
+> ```sql
+> --if A is null return B else return A
+> select nvl(A,B) from dual; 
+> ```
 
 #### 2、NVL2()
 > NVL2()函数的作用同样是判断字段值是否为NULL，但是Oracle在NVL()函数的基础上新增了一个参数，如NVL(A,B,C),若是A为NULL,则取C的值，不为NULL则是取B的值，不再取A的值，A作为一个判断条件。
+>```sql
+> --if A is null return C else return B
+> select nvl2(A, B, C) from dual;
+> ```
 
 #### 3、REPLACE()
 > REPLACE()函数的作用是替换字段中的字符串，如：字段A = "HelloWorld"，REPLACE(A,"World","ZhangSan")的执行结果为""HelloZhangSan。
+> ```sql
+> --return 'DBC'
+> select replace('ABC', 'A', 'D') from dual; 
+>
+> ```
 
 #### 4、LENGTH()
 > LENGTH()函数作用是获取字段的长度，如：字段A =  "ABC"，LENGTH(A)的执行结果为"3"。
+> ```sql
+> --return 3
+> select length('ABC') from dual;
+> ```
 
 #### 5、SUBSTR()
 > SUBSTR()函数的作用是截取字符串，如：字段A="Hello"，SUBSTR(A,0,2)的执行结果为"He",其中A为被截取的字符串，“0”代表开始截取的位置下标（注意Oracle中的SUBSTR()函数，下标0和1是一样的，都是第一个字符开始截取，若是负数，则是从字符串尾部往前数），“2”代表截取的字符个数。
+> ```sql
+> --return 'AB'
+> select subter('ABC', 0, 2) from dual;
+> ```
 
 #### 6、DECODE()
 > DECODE()函数的作用是判断字段值是否为某个值，若为某个值则进行替换，可以对一对或多对值进行比较。
-格式为：DECODE(A,S1,R1,S2,R2...,Defult)，其中A为目标字段，S1为比较字段，R1为结果字段，Defult为默认结果，把字段A与所有比较字段进行值的比较，若是相等，则输出结果字段，如果全部都不相等，则输出默认字段，若是没有指定默认字段，则默认输出NULL。
+格式为：DECODE(A,S1,R1,S2,R2...,Defult)，其中A为目标字段，S1为比较字段，R1为结果字段，default为默认结果，把字段A与所有比较字段进行值的比较，若是相等，则输出结果字段，如果全部都不相等，则输出默认字段，若是没有指定默认字段，则默认输出NULL。
 如：字段A = "ZhangSan"，DECODE(A,'ZhangSan','张三','LiSi','李四',NULL)的执行结果为："张三"。
+> ```sql
+> --if A is B return b else if C return c else return null
+> select decode(A, 'B', 'b', 'C', 'c' default null) from dual;
+> ```  
 
 #### 7、TO_DATE()
 > TO_DATE()函数为时间转换函数，格式为：TO_DATE('2022-06-30 00:00:00', 'YYYY-MM-DD HH24:MI:SS')，其中第一个参数为需要转换为时间的字符串，第二个参数为转换成的时间格式，可以自定义，需要注意的是在Oracle中，小时对应“HH24”,分对应“MI”。
+> ```sql
+> --return date type 2023-06-10 23:00:00 
+> select to_date('2023-06-10 23:00:00', 'yyyy-mm-dd HH24:MI:SS') date from dual;
+> ```
 
 #### 8、TO_CHAR()
 > TO_CHAR()函数为转换字符串，可以将时间转换为字符串，如：TO_CHAR(SYSDATE,'YYYYMMDD')，执行结果为“20220630”形式，可以按需要的格式将时间转换为字符串形式。
+> ```sql
+> --return string type 2023-06-10 23:00:00 
+> select to_char(sysdate, 'yyyy-mm-dd HH24:MI:SS') date from dual;
+> ```
 
 #### 9、ROUND()
 > ROUND()函数为计算精度函数，可以选择保留小数位数，如：字段A = '32.123456'，ROUND(A,3)的执行结果为“32.123”。
+> ```sql
+> --reruen 123.45
+> select round(123.456, 2) from dual;
+> ```
 
 #### 10、CONCAT()
 > CONCAT()函数的作用是字符串拼接，如：字段A = “Hellow”，B = “World”，CONCAT(A,B)的结果为“HelloWorld”。
-
+> ```sql
+> --return 'HelloWorld'
+> select concat('Hello', 'World') from dual;
+> ```
 
 #### 11、ROW_NUMBER() OVER()
 > ROW_NUMBER() OVER()函数的作用是按指定字段分组并排序，多用于取一组值中的最大或最小值。
+> ```sql
+> --return the table first record
+> select * from (select id, row_number() over(order by id desc) rn from dual) where rn = 1;
+> ```
+
 
 #### 12、FULL OUTER JOIN
 > FULL OUTER JOIN为两个表的并集，INNER JOIN则是交集。
-
+> ```sql
+> select * from A left outer join B;
+> ```
 
 #### 13、INSTR()
 > INSTR(S1,S2,[N1,N2])表示获取指定一个子字符串S2在主字符串S1中的位置，N1表示从主串的那个位置开始查找，N2表示第几个子串出现的位置（N1,N2为可选参数，不填默认为1，从左到右查找，第一个出现的位置，N1为负数则是从右到左查找）
-
+>```sql
+> --return 1
+>select instr('ABC', 'B') from dual;
+>```
 
 #### 14、CAST()
 > 字符类型转换函数，可以将string转成integer类型
+> ```sql
+> --return int type 123
+> select cast('123') from dual;
+> ```
+
+### 二、语法
+```sql
+--1、新增字段
+alter table tableName add column columnName columnType;
+
+--2、增加或修改字段注释
+comment on column tableName.columnName is '字段注释';
+
+--3、增加或修改表注释
+comment on table tableName is '表注释';
+
+```
\ No newline at end of file
Index: _config.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Hexo Configuration\n## Docs: https://hexo.io/docs/configuration.html\n## Source: https://github.com/hexojs/hexo/\n\n# Site\ntitle: TheKing's Blog\nsubtitle: ''\ndescription: 'Welcome to my blog'\nkeywords:\nauthor: TY-The-King\nlanguage: zn\ntimezone: ''\n\n# URL\n## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'\nurl: https://TY-The-king.giuhub.io\npermalink: :year/:month/:day/:title/\npermalink_defaults:\npretty_urls:\n  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks\n  trailing_html: true # Set to false to remove trailing '.html' from permalinks\n\n# Directory\nsource_dir: source\npublic_dir: public\ntag_dir: tags\narchive_dir: archives\ncategory_dir: categories\ncode_dir: downloads/code\ni18n_dir: :lang\nskip_render:\n\n# Writing\nnew_post_name: :title.md # File name of new posts\ndefault_layout: post\ntitlecase: false # Transform title into titlecase\nexternal_link:\n  enable: true # Open external links in new tab\n  field: site # Apply to the whole site\n  exclude: ''\nfilename_case: 0\nrender_drafts: false\npost_asset_folder: false\nrelative_link: false\nfuture: true\nhighlight:\n  enable: false\n  line_number: false\n  auto_detect: false\n  tab_replace: ''\n  wrap: true\n  hljs: false\nprismjs:\n  enable: false\n  preprocess: true\n  line_number: true\n  tab_replace: ''\n\n# Home page setting\n# path: Root path for your blogs index page. (default = '')\n# per_page: Posts displayed per page. (0 = disable pagination)\n# order_by: Posts order. (Order by date descending by default)\nindex_generator:\n  path: ''\n  per_page: 10\n  order_by: -date\n\n# Category & Tag\ndefault_category: uncategorized\ncategory_map: categories\ntag_map:\n\n# Metadata elements\n## https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta\nmeta_generator: true\n\n# Date / Time format\n## Hexo uses Moment.js to parse and display date\n## You can customize the date format as defined in\n## http://momentjs.com/docs/#/displaying/format/\ndate_format: YYYY-MM-DD\ntime_format: HH:mm:ss\n## updated_option supports 'mtime', 'date', 'empty'\nupdated_option: 'mtime'\n\n# Pagination\n## Set per_page to 0 to disable pagination\nper_page: 10\npagination_dir: page\n\n# Include / Exclude file(s)\n## include:/exclude: options only apply to the 'source/' folder\ninclude:\nexclude:\nignore:\n\n# Extensions\n## Plugins: https://hexo.io/plugins/\n## Themes: https://hexo.io/themes/\ntheme: hexo-theme-primer\n\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: 'git'\n  repo: git@github.com:TY-The-King/TY-The-king.github.io.git\n  branch: master\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/_config.yml b/_config.yml
--- a/_config.yml	(revision fb79d415e46cf9b136a96646eac0823a5d380fff)
+++ b/_config.yml	(date 1678526511068)
@@ -47,8 +47,8 @@
   enable: false
   line_number: false
   auto_detect: false
-  tab_replace: ''
-  wrap: true
+  tab_replace:
+  wrap: false
   hljs: false
 prismjs:
   enable: false
Index: source/_posts/linux.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>---\ntitle: linux order\ndate: 2023-03-08 22:04:16\ntags: linux命令\ncategories:\n- 日常记录\nexcerpt: Linux常用命令\ncomments: false\n---\n```shell\n\n```
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/source/_posts/linux.md b/source/_posts/linux.md
--- a/source/_posts/linux.md	(revision fb79d415e46cf9b136a96646eac0823a5d380fff)
+++ b/source/_posts/linux.md	(date 1686406166418)
@@ -1,12 +1,44 @@
 ---
-title: linux order
+title: Linux order
 date: 2023-03-08 22:04:16
 tags: linux命令
 categories:
 - 日常记录
-excerpt: Linux常用命令
+excerpt: Linux常用基础命令
 comments: false
 ---
 ```shell
+#输出日志,-n代表输出最后多少行，-f代表实时监视文件
+#这里实时输出日志的最后2000行
+tail -fn 2000 xxx.log
+
+#复制文件
+cp -r /sourcePath/fileName /targetPath/fileName
 
+#修改文件名
+mv oldFileName newFileName
+
+#解压.zip文件
+unzip zipName
+
+#解压.tar.gz文件
+tar -zxvf fileName.tar.gz
+
+#-r递归删除文件或者目录
+rm -r fileName
+
+#-f忽略不存的文件，不做提示删除文件，-i则是互动式
+rm -rf fileName
+
+#查看硬盘情况
+df -h 
+
+#查看内存情况
+free -h
+
+#按关键字搜索日志，可以使用vi打开日志，
+#再输入“/+关键字”，回车进行查找，“N”是下一个
+
+#查看文件夹下文件的大小
+ls -lah
 ```
\ No newline at end of file
